def registry = 'https://rushrx.jfrog.io'
def imageName = 'rushrx.jfrog.io/dockerrepo-docker-local/ttrendapp'
def version   = '2.0.2'
pipeline {
    agent {
        node {
            label 'maven'
        }
    }

environment {
    PATH = "/tmp/apache-maven-3.9.5/bin:$PATH"
}
    stages {

        stage('Build code') {
            steps {
                sh 'mvn clean deploy -Dmaven.test.skip=true'
            }
        }

        stage('SonarQube analysis') {
            environment {
                scannerHome = tool 'sonar-scaner'
            }
            steps {
                withSonarQubeEnv('sonarqube-server') { // If you have configured more than one global server connection, you can specify its name
                sh "${scannerHome}/bin/sonar-scanner"
            }
            }
        }

        stage('Test') {
            steps {
                echo '--------------------------------------------'
                sh 'mvn surefire-report:report'
            }
        }

        stage("Quality Gate"){
            steps {
                script {
                    timeout(time: 1, unit: 'HOURS') { // Just in case something goes wrong, pipeline will be killed after a timeout
                    def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
                    if (qg.status != 'OK') {
                        error "Pipeline aborted due to quality gate failure: ${qg.status}"
                    }
                    }
                }
            }
        }

        stage("Jar Publish") {
            steps {
                script {
                    def server = Artifactory.newServer url:registry+"/artifactory" ,  credentialsId:"jfrog-cred"
                    def properties = "buildid=${env.BUILD_ID},commitid=${GIT_COMMIT}";
                    def uploadSpec = """{
                        "files": [
                        {
                            "pattern": "jarstaging/(*)",
                            "target": "libs-release-local/{1}",
                            "flat": "false",
                            "props" : "${properties}",
                            "exclusions": [ "*.sha1", "*.md5"]
                        }
                        ]
                    }"""
                    def buildInfo = server.upload(uploadSpec)
                    buildInfo.env.collect()
                    server.publishBuildInfo(buildInfo)
                }
            }
        }

        stage(" Docker Build ") {
            steps {
                script {
                    app = docker.build(imageName+":"+version)
                }
            }
        }

        stage (" Docker Publish "){
            steps {
                script { 
                    docker.withRegistry(registry, 'jfrog-cred'){
                        app.push()
                    } 
                }
            }
        }

        stage(" Deploy ") {
            steps {
                script {
                    sh 'helm install twittertrend-2.0.2 ttrend'
                }
            }
        } 
    }
}